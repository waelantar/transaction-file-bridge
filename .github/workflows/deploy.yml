name: Build and Deploy to OpenShift

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: waelantar/transaction-file-bridge
  OPENSHIFT_PROJECT: antarwael189-dev
  OPENSHIFT_APP_NAME: transaction-file-bridge
  MINIO_APP_NAME: minio

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Get image digest
        id: digest
        run: echo "digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

      - name: Debug image information
        run: |
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "Full image reference: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"

    outputs:
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      digest: ${{ steps.digest.outputs.digest }}
      tags: |
        ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-openshift:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OpenShift CLI
        run: |
          # Download the latest stable version of the OpenShift client
          curl -LO "https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz"
          # Extract the archive
          tar -xzf oc.tar.gz
          # Move the oc binary to a directory in PATH
          sudo mv oc /usr/local/bin/
          # Verify the installation
          oc version

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          openshift_project: ${{ env.OPENSHIFT_PROJECT }}

      - name: Apply OpenShift Manifests
        run: |
          # Apply all manifests in the openshift directory
          oc apply -f openshiftScripts/
          
          # Wait for deployments to be ready
          oc rollout status deployment/minio
          oc rollout status deployment/${{ env.OPENSHIFT_APP_NAME }}

      - name: Debug deployment before update
        run: |
          echo "=== CURRENT DEPLOYMENT INFO ==="
          oc get deployment/${{ env.OPENSHIFT_APP_NAME}} -o yaml | grep -A 10 "image:"

      - name: Update Application Image
        id: update-image
        run: |
          # Debug information
          echo "=== DEBUG INFO ==="
          echo "Image: ${{ needs.build.image }}"
          echo "Digest: ${{ needs.build.digest }}"
          echo "Full image reference: ${{ needs.build.image }}@${{ needs.build.digest }}"
          
          # Update the application deployment with the new image
          oc set image deployment/${{ env.OPENSHIFT_APP_NAME }} ${{ env.OPENSHIFT_APP_NAME }}=${{ needs.build.image }}@${{ needs.build.digest }}
          
          # Verify the update
          echo "=== UPDATED DEPLOYMENT INFO ==="
          oc get deployment/${{ env.OPENSHIFT_APP_NAME}} -o yaml | grep -A 10 "image:"
          
          # Wait for the deployment to complete with extended timeout
          oc rollout status deployment/${{ env.OPENSHIFT_APP_NAME }} --timeout=600s
        continue-on-error: true

      - name: Check Deployment Status
        if: steps.update-image.outcome == 'failure'
        run: |
          echo "=== DEPLOYMENT FAILED ==="
          echo "Checking deployment status..."
          oc describe deployment/${{ env.OPENSHIFT_APP_NAME }}
          
          echo ""
          echo "=== POD STATUS ==="
          oc get pods -l app=${{ env.OPENSHIFT_APP_NAME }}
          
          echo ""
          echo "=== EVENTS ==="
          oc get events --field-selector involvedObject.name=${{ env.OPENSHIFT_APP_NAME }}
          
          echo ""
          echo "=== POD LOGS ==="
          # Get the name of the newest pod
          POD_NAME=$(oc get pods -l app=${{ env.OPENSHIFT_APP_NAME }} -o jsonpath='{.items[0].metadata.name}')
          echo "Checking logs for pod: $POD_NAME"
          oc logs $POD_NAME || true

      - name: Rollback Deployment
        if: steps.update-image.outcome == 'failure'
        run: |
          echo "=== ROLLING BACK DEPLOYMENT ==="
          # Rollback to the previous revision
          oc rollout undo deployment/${{ env.OPENSHIFT_APP_NAME }}
          
          # Wait for the rollback to complete
          oc rollout status deployment/${{ env.OPENSHIFT_APP_NAME }} --timeout=300s
          
          echo "Rollback completed successfully"

      - name: Verify Deployment
        if: steps.update-image.outcome == 'success'
        run: |
          # Check that all pods are running
          oc get pods -l app=${{ env.OPENSHIFT_APP_NAME }}
          oc get pods -l app=minio
          
          # Check application health
          APP_ROUTE=$(oc get route ${{ env.OPENSHIFT_APP_NAME }} -o jsonpath='{.spec.host}')
          MINIO_ROUTE=$(oc get route minio-console -o jsonpath='{.spec.host}')
          
          echo "Application URL: http://$APP_ROUTE"
          echo "MinIO Console URL: http://$MINIO_ROUTE"
          
          # Test application health endpoint
          curl -f http://$APP_ROUTE/actuator/health || exit 1

  notify:
    needs: [build, deploy-openshift]
    runs-on: ubuntu-latest
    if: always() && (needs.build.result == 'success' || needs.deploy-openshift.result == 'success')

    steps:
      - name: Notify Deployment Status
        run: |
          if [[ "${{ needs.deploy-openshift.result }}" == "success" ]]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi